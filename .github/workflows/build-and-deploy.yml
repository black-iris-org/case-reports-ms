name: Case Reports Build and Deployment

on:
  workflow_dispatch:
  push:
    branches: [ develop, master ]
  pull_request:
    branches: [ develop ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis:10-2.5-alpine
        env:
          POSTGRES_USER: db
          POSTGRES_DB: db
          POSTGRES_PASSWORD: secret
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      minio:
        image: satantime/minio-server
        env:
          MINIO_ROOT_USER: access_key
          MINIO_ROOT_PASSWORD: secret_key

    steps:
      - name: Prepare Variables
        env:
          DOCKER_IMAGE_NAME: case-reports-ms
        run: |
          set -e
          IMAGE_NAME=docker.io/${{secrets.DOCKER_USERNAME}}/$DOCKER_IMAGE_NAME
          IMAGE_TAG=${GITHUB_REF_NAME//\//_}
          echo "export IMAGE_NAME=$IMAGE_NAME" > variables.txt
          echo "export IMAGE_TAG=$IMAGE_TAG" >> variables.txt
          cat variables.txt

      - name: Upload Variables Artifact
        uses: actions/upload-artifact@v2
        with:
          name: variables
          path: variables.txt

      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Download Variables Artifacts
        uses: actions/download-artifact@v2
        with:
          name: variables
          path: ./

      - name: Build Docker Image
        run: |
          set -e
          source variables.txt
          export DOCKER_BUILDKIT=1
          echo ${{secrets.DOCKER_PASSWORD}} | docker login -u ${{secrets.DOCKER_USERNAME}} --password-stdin
          ./.docker/build-base.sh
          ./.docker/build-app-image.sh
          ./.docker/copy-bundle-cache.sh
          docker save --output image.docker $IMAGE_NAME:$IMAGE_TAG

      - name: Cache Docker Layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Cache Bundle Dependencies
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock', '**/*.gemspec') }}

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-image
          path: image.docker


  test:
    needs: build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15.1-alpine
        ports:
          - '9000:5432'
        env:
          POSTGRES_USER: db
          POSTGRES_DB: db
          POSTGRES_PASSWORD: secret
      minio:
        image: satantime/minio-server
        ports:
          - '9001:9000'
        env:
          MINIO_ACCESS_KEY: access_key
          MINIO_SECRET_KEY: secret_key

    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v2
        with:
          name: docker-image
          path: ./

      - name: Load Docker Image
        run: docker load --input ./image.docker

      - name: Create .env File
        run: |
          cat <<ENV > .env
          RAILS_ENV=test
          PGDATABASE=db
          PGUSER=db
          PGPASSWORD=secret
          PGHOST=localhost
          DB_USER=db
          DB_HOST=localhost
          DB_PORT=5432
          DB_PASSWORD=secret
          AWS_ACCESS_KEY_ID=access_key
          AWS_SECRET_ACCESS_KEY=secret_key
          AWS_DEFAULT_REGION=us-east-1
          AWS_BUCKET_NAME=beacon-uploads-staging
          AWS_BUCKET=beacon-uploads-staging
          AWS_REGION=us-east-1
          S3_ENDPOINT=http://localhost:9001
          ENV

      - name: Run Tests
        run: |
          docker run --env-file=.env -e PGHOST=postgres -e S3_ENDPOINT=http://minio:9001 \
          --network container:postgres --network container:minio \
          $IMAGE_NAME:$IMAGE_TAG \
          bash -c "bundle exec rails db:create db:schema:load && bundle exec rspec"