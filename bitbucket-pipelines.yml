options:
  docker: true

definitions:
  services:
    postgres:
      image: postgis/postgis:10-2.5-alpine
      memory: 512
      environment:
        POSTGRES_USER: db
        POSTGRES_DB: db
        POSTGRES_PASSWORD: secret
    minio:
      image: satantime/minio-server
      environment:
        MINIO_ROOT_USER: access_key
        MINIO_ROOT_PASSWORD: secret_key

  steps:
    - step: &prepare_variables
        id: prepare_variables
        name: Prepare Variables
        image: alpine:3.14
        clone:
          enabled: false
        script:
          - set -e
          - IMAGE_NAME=docker.io/$DOCKER_USERNAME/$DOCKER_IMAGE_NAME
          - IMAGE_TAG=${BITBUCKET_BRANCH//\//_}
          - echo "IMAGE_NAME=$IMAGE_NAME" >> variables.txt
          - echo "IMAGE_TAG=$IMAGE_TAG" >> variables.txt
        artifacts:
          - variables.txt

    - step: &build_docker_image
        id: build_docker_image
        name: Build Docker Image
        script:
          - set -e
          - source variables.txt
          - export DOCKER_BUILDKIT=1
          - echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          - |
            docker build \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --cache-from $IMAGE_NAME:staging \
            -t $IMAGE_NAME:$IMAGE_TAG .
          - docker save --output image.docker $IMAGE_NAME:$IMAGE_TAG
        caches:
          - docker
        depends_on:
          - prepare_variables
        artifacts:
          - image.docker

    - step: &test
        id: test
        name: Test
        deployment: Test
        clone:
          enabled: false
        script:
          - set -e
          - source variables.txt
          - docker load --input ./image.docker
          - |
            cat <<ENV > .env
            RAILS_ENV=test
            PGDATABASE=db
            PGUSER=db
            PGPASSWORD=secret
            PGHOST=host.docker.internal
            DB_USER=db
            DB_HOST=host.docker.internal
            DB_PORT=5432
            DB_PASSWORD=secret
            AWS_ACCESS_KEY_ID=access_key
            AWS_SECRET_ACCESS_KEY=secret_key
            AWS_DEFAULT_REGION=us-east-1
            AWS_BUCKET_NAME=beacon-uploads-staging
            AWS_BUCKET=beacon-uploads-staging
            AWS_REGION=us-east-1
            S3_ENDPOINT=http://host.docker.internal:9000
            ENV
          - |
            docker run --env-file=.env \
                       --add-host host.docker.internal:$BITBUCKET_DOCKER_HOST_INTERNAL \
                       --rm $IMAGE_NAME:$IMAGE_TAG \
                       bash -c "rails db:create db:schema:load && bundle exec rspec"
        caches:
          - docker
        services:
          - postgres
          - minio
        depends_on:
          - build_docker_image

    - step: &push_image
        id: push_image
        name: Push Image
        clone:
          enabled: false
        script:
          - source variables.txt
          - echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          - docker load --input ./image.docker
          - docker push $IMAGE_NAME:$IMAGE_TAG
        caches:
          - docker

  deploy_commands: &deploy_commands |
    set -e
    source variables.txt
    REMOTE_COMMANDS=$(cat <<SCRIPT
    set -e
    mkdir -p case-reports-ms && cd case-reports-ms
    echo "$(cat .docker/docker-compose.server.yml | base64)" | base64 --decode > docker-compose.yml
    echo "$ENV_FILE" | base64 --decode > .env
    cat <<UP_COMMAND > up.sh
    sudo TAG=${IMAGE_TAG} docker compose pull
    sudo TAG=${IMAGE_TAG} docker compose up -d
    UP_COMMAND
    echo "sudo TAG=${IMAGE_TAG} docker compose down" > down.sh
    sudo chmod +x up.sh down.sh
    sudo ./up.sh
    SCRIPT
    )
    ssh -o "StrictHostKeyChecking=no" -i $BITBUCKET_SSH_KEY_FILE $SSH_USER@$SERVER_IP "$REMOTE_COMMANDS"
    wait

pipelines:
  pull-requests:
    '**':
      - step: *prepare_variables
      - step: *build_docker_image
      - step: *test

  branches:
    develop:
      - step: *prepare_variables
      - step: *build_docker_image
      - step: *test
      - step: *push_image
      - step:
          name: Deployment to Staging
          deployment: Staging
          caches:
            - docker
          depends_on:
            - prepare_variables
            - build_docker_image
            - test
          script:
            - echo "Deploying to $BITBUCKET_DEPLOYMENT_ENVIRONMENT server..."
            - *deploy_commands

    master:
      - step: *prepare_variables
      - step: *build_docker_image
      - step: *test
      - step: *push_image
      - parallel:
          steps:
            - step:
                name: Deploy to Paris
                deployment: Production-Paris
                trigger: manual
                artifacts:
                  - variables.txt
                script:
                  - echo "Deploying to $BITBUCKET_DEPLOYMENT_ENVIRONMENT server..."
                  - *deploy_commands
            - step:
                name: Deploy to VA2
                deployment: Production-VA2
                trigger: manual
                artifacts:
                  - variables.txt
                script:
                  - echo "Deploying to $BITBUCKET_DEPLOYMENT_ENVIRONMENT server..."
                  - *deploy_commands
            - step:
                name: Deploy to VA3
                deployment: Production-VA3
                trigger: manual
                artifacts:
                  - variables.txt
                script:
                  - echo "Deploying to $BITBUCKET_DEPLOYMENT_ENVIRONMENT server..."
                  - *deploy_commands
